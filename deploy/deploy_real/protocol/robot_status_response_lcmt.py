"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class robot_status_response_lcmt(object):

    __slots__ = ["motion_id", "motor_num", "motor_pos", "motor_vel", "motor_torque", "motor_error"]

    __typenames__ = ["int32_t", "int32_t", "float", "float", "float", "int32_t"]

    __dimensions__ = [None, None, ["motor_num"], ["motor_num"], ["motor_num"], ["motor_num"]]

    def __init__(self):
        self.motion_id = 0
        """ LCM Type: int32_t """
        self.motor_num = 0
        """
        motion gait_id
        LCM Type: int32_t
        """

        self.motor_pos = []
        """
        motor number
        LCM Type: float[motor_num]
        """

        self.motor_vel = []
        """
        motor position
        LCM Type: float[motor_num]
        """

        self.motor_torque = []
        """
        motor velocity
        LCM Type: float[motor_num]
        """

        self.motor_error = []
        """
        motor torque
        LCM Type: int32_t[motor_num]
        """


    def encode(self):
        buf = BytesIO()
        buf.write(robot_status_response_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ii", self.motion_id, self.motor_num))
        buf.write(struct.pack('>%df' % self.motor_num, *self.motor_pos[:self.motor_num]))
        buf.write(struct.pack('>%df' % self.motor_num, *self.motor_vel[:self.motor_num]))
        buf.write(struct.pack('>%df' % self.motor_num, *self.motor_torque[:self.motor_num]))
        buf.write(struct.pack('>%di' % self.motor_num, *self.motor_error[:self.motor_num]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != robot_status_response_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return robot_status_response_lcmt._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = robot_status_response_lcmt()
        self.motion_id, self.motor_num = struct.unpack(">ii", buf.read(8))
        self.motor_pos = struct.unpack('>%df' % self.motor_num, buf.read(self.motor_num * 4))
        self.motor_vel = struct.unpack('>%df' % self.motor_num, buf.read(self.motor_num * 4))
        self.motor_torque = struct.unpack('>%df' % self.motor_num, buf.read(self.motor_num * 4))
        self.motor_error = struct.unpack('>%di' % self.motor_num, buf.read(self.motor_num * 4))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if robot_status_response_lcmt in parents: return 0
        tmphash = (0xf251d3885dd02dca) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if robot_status_response_lcmt._packed_fingerprint is None:
            robot_status_response_lcmt._packed_fingerprint = struct.pack(">Q", robot_status_response_lcmt._get_hash_recursive([]))
        return robot_status_response_lcmt._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", robot_status_response_lcmt._get_packed_fingerprint())[0]

