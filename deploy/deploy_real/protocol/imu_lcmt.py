"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class imu_lcmt(object):

    __slots__ = ["estAcc", "estAngularRate", "estEulerAngle", "gravityVec", "q", "status"]

    __typenames__ = ["float", "float", "float", "float", "float", "int32_t"]

    __dimensions__ = [[3], [3], [3], [3], [4], None]

    def __init__(self):
        self.estAcc = [ 0.0 for dim0 in range(3) ]
        """ LCM Type: float[3] """
        self.estAngularRate = [ 0.0 for dim0 in range(3) ]
        """
        imu acc
        LCM Type: float[3]
        """

        self.estEulerAngle = [ 0.0 for dim0 in range(3) ]
        """
        imu gyro
        LCM Type: float[3]
        """

        self.gravityVec = [ 0.0 for dim0 in range(3) ]
        """
        roll, pitch and yaw
        LCM Type: float[3]
        """

        self.q = [ 0.0 for dim0 in range(4) ]
        """ LCM Type: float[4] """
        self.status = 0
        """
        x, y, z, w
        LCM Type: int32_t
        """


    def encode(self):
        buf = BytesIO()
        buf.write(imu_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>3f', *self.estAcc[:3]))
        buf.write(struct.pack('>3f', *self.estAngularRate[:3]))
        buf.write(struct.pack('>3f', *self.estEulerAngle[:3]))
        buf.write(struct.pack('>3f', *self.gravityVec[:3]))
        buf.write(struct.pack('>4f', *self.q[:4]))
        buf.write(struct.pack(">i", self.status))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != imu_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return imu_lcmt._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = imu_lcmt()
        self.estAcc = struct.unpack('>3f', buf.read(12))
        self.estAngularRate = struct.unpack('>3f', buf.read(12))
        self.estEulerAngle = struct.unpack('>3f', buf.read(12))
        self.gravityVec = struct.unpack('>3f', buf.read(12))
        self.q = struct.unpack('>4f', buf.read(16))
        self.status = struct.unpack(">i", buf.read(4))[0]
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if imu_lcmt in parents: return 0
        tmphash = (0xc26741cf77b8a986) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if imu_lcmt._packed_fingerprint is None:
            imu_lcmt._packed_fingerprint = struct.pack(">Q", imu_lcmt._get_hash_recursive([]))
        return imu_lcmt._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", imu_lcmt._get_packed_fingerprint())[0]

